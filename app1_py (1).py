# -*- coding: utf-8 -*-
"""app1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IghiDM45EQa-haLE5aUbouvi6XVsz3OB
"""

!pip install flask-ngrok

from flask import Flask, render_template, request, Markup
import numpy as np
import pandas as pd

from google.colab import files
uploaded = files.upload()

from flask import Flask, render_template, request, Markup
import numpy as np
import pandas as pd
import requests
import pickle
import io
import torch
from torchvision import transforms

# ==============================================================================================

# -------------------------LOADING THE TRAINED MODELS -----------------------------------------------

# Loading plant disease classification model



# Loading crop recommendation model

crop_recommendation_model_path = 'RandomForest.pkl'
crop_recommendation_model = pickle.load(
    open(crop_recommendation_model_path, 'rb'))

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

app = Flask(__name__)
app.route('/crop-recommend')


def crop_recommend():
    title = 'Crop Recommendation'
    return render_template('crop.html', title=title)

def crop_prediction():
    title = 'Crop Recommendation'

    if request.method == 'POST':
        N = int(request.form['nitrogen'])
        P = int(request.form['phosphorous'])
        K = int(request.form['pottasium'])
        ph = float(request.form['ph'])
        rainfall = float(request.form['rainfall'])

        # state = request.form.get("stt")
        city = request.form.get("city")

        if weather_fetch(city) != None:
            temperature, humidity = weather_fetch(city)
            data = np.array([[N, P, K, temperature, humidity, ph, rainfall]])
            my_prediction = crop_recommendation_model.predict(data)
            final_prediction = my_prediction[0]

            return render_template('crop-result.html', prediction=final_prediction, title=title)

        else:

            return render_template('try_again.html', title=title)